{"ast":null,"code":"import _classCallCheck from \"/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/src/home/Autocomplete.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Autocomplete.css\";\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).call(this, props));\n\n    _this.onTextChanged = function (e) {\n      var value = e.target.value;\n      var suggestions = [];\n\n      if (value.length > 0) {\n        var regEx = new RegExp(\"^\".concat(value), \"i\");\n        suggestions = _this.items.sort().filter(function (v) {\n          return regEx.test(v);\n        });\n      }\n\n      _this.setState(function () {\n        return {\n          suggestions: suggestions,\n          text: value\n        };\n      });\n    };\n\n    _this.items = [];\n    _this.state = {\n      suggestions: ['denis', 'richie', 'malik', 'sanamsdasfsgdhf'],\n      text: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"renderSuggestions\",\n    value: function renderSuggestions() {\n      var _this2 = this;\n\n      var suggestions = this.state.suggestions;\n\n      if (suggestions.length === 0) {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, suggestions.map(function (item) {\n        return React.createElement(\"li\", {\n          onClick: function onClick() {\n            return _this2.suggestionselected(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, item);\n      }));\n    }\n  }, {\n    key: \"suggestionselected\",\n    value: function suggestionselected(value) {\n      this.setState(function () {\n        return {\n          text: value,\n          suggestions: []\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var text = this.state.text;\n      return React.createElement(\"div\", {\n        className: \"AutoCompleteText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: text,\n        onChange: this.onTextChanged,\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), this.renderSuggestions());\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":{"version":3,"sources":["/home/itsme/mydata/SEN/estate_locator-SEN-CLIENT/src/home/Autocomplete.js"],"names":["React","Link","AutoComplete","props","onTextChanged","e","value","target","suggestions","length","regEx","RegExp","items","sort","filter","v","test","setState","text","state","map","item","suggestionselected","renderSuggestions","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,oBAAP;;IAEMC,Y;;;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;;AADiB,UAQnBC,aARmB,GAQH,UAAAC,CAAC,EAAI;AACnB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,UAAIE,WAAW,GAAG,EAAlB;;AACA,UAAIF,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAMC,KAAK,GAAG,IAAIC,MAAJ,YAAeL,KAAf,GAAwB,GAAxB,CAAd;AACAE,QAAAA,WAAW,GAAG,MAAKI,KAAL,CAAWC,IAAX,GAAkBC,MAAlB,CAAyB,UAAAC,CAAC;AAAA,iBAAIL,KAAK,CAACM,IAAN,CAAWD,CAAX,CAAJ;AAAA,SAA1B,CAAd;AACD;;AACD,YAAKE,QAAL,CAAc;AAAA,eAAO;AAAET,UAAAA,WAAW,EAAXA,WAAF;AAAeU,UAAAA,IAAI,EAAEZ;AAArB,SAAP;AAAA,OAAd;AACD,KAhBkB;;AAEjB,UAAKM,KAAL,GAAa,EAAb;AACA,UAAKO,KAAL,GAAa;AACXX,MAAAA,WAAW,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,iBAA7B,CADF;AAEXU,MAAAA,IAAI,EAAE;AAFK,KAAb;AAHiB;AAOlB;;;;wCAUmB;AAAA;;AAAA,UACVV,WADU,GACM,KAAKW,KADX,CACVX,WADU;;AAElB,UAAIA,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,eAAO,IAAP;AACD;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,WAAW,CAACY,GAAZ,CAAgB,UAAAC,IAAI;AAAA,eACnB;AAAI,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACC,kBAAL,CAAwBD,IAAxB,CAAN;AAAA,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmDA,IAAnD,CADmB;AAAA,OAApB,CADH,CADF;AAOD;;;uCACkBf,K,EAAO;AACxB,WAAKW,QAAL,CAAc;AAAA,eAAO;AACnBC,UAAAA,IAAI,EAAEZ,KADa;AAEnBE,UAAAA,WAAW,EAAE;AAFM,SAAP;AAAA,OAAd;AAID;;;6BACQ;AAAA,UACCU,IADD,GACU,KAAKC,KADf,CACCD,IADD;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,KAAK,EAAEA,IAAd;AAAoB,QAAA,QAAQ,EAAE,KAAKd,aAAnC;AAAkD,QAAA,IAAI,EAAC,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKmB,iBAAL,EAFH,CADF;AAMD;;;;EA7CwBvB,KAAK,CAACwB,S;;AA+CjC,eAAetB,YAAf","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Autocomplete.css\";\n\nclass AutoComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.items = [];\n    this.state = {\n      suggestions: ['denis', 'richie', 'malik', 'sanamsdasfsgdhf'],\n      text: \"\"\n    };\n  }\n  onTextChanged = e => {\n    const value = e.target.value;\n    let suggestions = [];\n    if (value.length > 0) {\n      const regEx = new RegExp(`^${value}`, \"i\");\n      suggestions = this.items.sort().filter(v => regEx.test(v));\n    }\n    this.setState(() => ({ suggestions, text: value }));\n  };\n  renderSuggestions() {\n    const { suggestions } = this.state;\n    if (suggestions.length === 0) {\n      return null;\n    }\n    return (\n      <ul>\n        {suggestions.map(item => (\n          <li onClick={() => this.suggestionselected(item)}>{item}</li>\n        ))}\n      </ul>\n    );\n  }\n  suggestionselected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n  render() {\n    const { text } = this.state;\n    return (\n      <div className=\"AutoCompleteText\">\n        <input value={text} onChange={this.onTextChanged} type=\"text\" />\n        {this.renderSuggestions()}\n      </div>\n    );\n  }\n}\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}